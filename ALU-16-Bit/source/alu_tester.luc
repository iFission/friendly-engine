module alu_tester(
    input clk, // clock
    input rst, // reset

    // 
    input scrambler_dip,

    // led output
    output led_alu_output[16],
    output led_test_case[8])
{

    .clk(clk)
    {
        .rst(rst)
        {
            
            dff counter[27];
            fsm test_case = {ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, PASS};
        }
    }
    alu16 alu16;

    sig alu_output[16];

    always
    {
        // initial values
        counter.d = counter.q + 1; // connects dff's input to output + 1. everytime clk goes to high, q += 1
        led_test_case = 0;
    
        alu16.a = 16b0;
        alu16.b = 16b0;
        alu16.alufn = 6b0;

case(scrambler_dip){
    0: alu_output = alu16.alu;
    1: alu_output = 16b1010101010101010;
      default: alu_output = alu16.alu;
}

    led_alu_output = alu_output;

    case (test_case.q) {
        test_case.ONE:
            // adder
            // 16b0 + 16b16*{1} = 16b16*{1}
            // z = 0
            // v = 0
            // n = 1
             
            led_test_case = 8b10000000;
            
            alu16.a = 16b1111111111111111;
            alu16.b = 16b0000000000000000;
            alu16.alufn = 6b0;

            led_test_case[2] = alu16.z;
            led_test_case[1] = alu16.v;
            led_test_case[0] = alu16.n;
            if (alu_output == 16b1111111111111111 && alu16.z == 0 && alu16.v == 0 && alu16.n == 1)
            {
                if (counter.q[26] == 1)
                {
                    test_case.d = test_case.TWO;
                }
            }

        test_case.TWO:            
            // adder
            // 16b10000000000000000 + 16b10000000000000000 = 16b0
            // z = 1
            // v = 1
            // n = 0
            led_test_case = 8b01000000;
            
            alu16.a = 16b1000000000000000;
            alu16.b = 16b1000000000000000;
            alu16.alufn = 6b0;

            led_test_case[2] = alu16.z;
            led_test_case[1] = alu16.v;
            led_test_case[0] = alu16.n;

            if (alu_output == 16b0 && alu16.z == 1 && alu16.v == 1 && alu16.n == 0)
            {
                if (counter.q[26] == 0)
                {
                    test_case.d = test_case.THREE;
                }
            }

        test_case.THREE: 
            // bool
            // 16b0101010010010100 & 16b1010001010101010 = 16b0000000010000000

            led_test_case = 8b00100000;
            
            alu16.a = 16b0101010010010100;
            alu16.b = 16b1010001010101010;
            alu16.alufn = 6b011000;

            if (alu_output == 16b0000000010000000)
            {
                if (counter.q[26] == 1)
                {
                    test_case.d = test_case.FOUR;
                }
            }

        test_case.FOUR:
            // bool
            // 16b0101010010010100 & 16b1010001010101010 = 16b1111011010111110

            led_test_case = 8b00010000;
            
            alu16.a = 16b0101010010010100;
            alu16.b = 16b1010001010101010;
            alu16.alufn = 6b011000;

            if (alu_output == 16b0000000010000000)
            {
                if (counter.q[26] == 0)
                {
                    test_case.d = test_case.FIVE;
                }
            }

        test_case.FIVE:
            // shift
            // 16b0101010010010100 << 2 in binary 4b0010 = 16b010101001001010000

            led_test_case = 8b00001000;
            
            alu16.a = 16b0101010010010100;
            alu16.b = 16b0010;
            alu16.alufn = 6b100000;

            if (alu_output == 16b0101001001010000)
            {
                if (counter.q[26] == 1)
                {
                    test_case.d = test_case.SIX;
                }
            }

        test_case.SIX:
            // shift right arithmetic
            // 16b1101010010010100 >> 2 in binary 4b0010 = 16b1111010100100101

            led_test_case = 8b00000100;
            
            alu16.a = 16b0101010010010100;
            alu16.b = 16b0010;
            alu16.alufn = 6b100001;

            if (alu_output == 16b0001010100100101)
            {
                if (counter.q[26] == 0)
                {
                    test_case.d = test_case.SEVEN;
                }
            }

        test_case.SEVEN:
            // cmp16
            // a=16b0
            // b=16b0
            // a==b true

            led_test_case = 8b00000010;
            
            alu16.a = 16b1;
            alu16.b = 16b0000000000000001;
            alu16.alufn = 6b110011;

            if (alu_output == 16b0000000000000001)
            {
                if (counter.q[26] == 1)
                {
                    test_case.d = test_case.EIGHT;
                }
            }

        test_case.EIGHT:
            // adder multiply
            // 16b010010 * 16b101001 = 16b0000001011100010
            led_test_case = 8b00000001;
            
            alu16.a = 16b0000000000010010;
            alu16.b = 16b0000000000101001;
            alu16.alufn = 6b000010;

            if (alu_output == 16b0000001011100010)
            {
                if (counter.q[26] == 0)
                {
                    test_case.d = test_case.PASS;
                }
            }

        test_case.PASS :
            // io_led[0] lights up if all passes
            led_test_case = 8b11111111;

        }

    }
}
