module sixteenbitadder (
    input alufn[2],
    input a[16], // 16 bit input
    input b[16], // 16 bit input
    output z, // z is 1 is all outputs of the sum of a and b are 0
    output v, // v is true if overflow occurs
    output n, // n is true if the sum is negative
    output outputsum[16] // 16 bit sum
  ) {
    sig sum[17]; // sum of A and B
    sig negsum[16]; // A - B
    always{
        negsum = a-b;
        case(alufn[1:0]){
        b00: sum = a+b; // addition when alufn0 set to 0
        b01: sum = negsum; // subtraction when alufn0 set to 1
        b10: sum = a*b;
        b11: sum = a/b;
        default: sum = a+b;
      }
      outputsum = sum[15:0]; // output sum is 16 bits
      z = ~|negsum; 
      n = sum[16]; // n is true(1) when sum is negsum(MSB of sum would be 1)  
      v = (a[15] & ~b[15] & (~negsum[15])) | ((~a[15])&(b[15])&negsum[15]);
    }
  }