/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu16_3 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] alu
  );
  
  
  
  wire [1-1:0] M_add16_z;
  wire [1-1:0] M_add16_v;
  wire [1-1:0] M_add16_n;
  wire [16-1:0] M_add16_outputsum;
  reg [2-1:0] M_add16_alufn;
  reg [16-1:0] M_add16_a;
  reg [16-1:0] M_add16_b;
  sixteenbitadder_4 add16 (
    .alufn(M_add16_alufn),
    .a(M_add16_a),
    .b(M_add16_b),
    .z(M_add16_z),
    .v(M_add16_v),
    .n(M_add16_n),
    .outputsum(M_add16_outputsum)
  );
  
  wire [16-1:0] M_bool16_bool;
  reg [16-1:0] M_bool16_a;
  reg [16-1:0] M_bool16_b;
  reg [4-1:0] M_bool16_aLUFN;
  alu_bool_5 bool16 (
    .a(M_bool16_a),
    .b(M_bool16_b),
    .aLUFN(M_bool16_aLUFN),
    .bool(M_bool16_bool)
  );
  
  wire [1-1:0] M_cmp16_cmp;
  reg [6-1:0] M_cmp16_alufn;
  reg [1-1:0] M_cmp16_z;
  reg [1-1:0] M_cmp16_n;
  reg [1-1:0] M_cmp16_v;
  comparator_6 cmp16 (
    .alufn(M_cmp16_alufn),
    .z(M_cmp16_z),
    .n(M_cmp16_n),
    .v(M_cmp16_v),
    .cmp(M_cmp16_cmp)
  );
  
  wire [16-1:0] M_shift16_shift;
  reg [16-1:0] M_shift16_inpa;
  reg [16-1:0] M_shift16_inpb;
  reg [6-1:0] M_shift16_alufn;
  bitshift_7 shift16 (
    .inpa(M_shift16_inpa),
    .inpb(M_shift16_inpb),
    .alufn(M_shift16_alufn),
    .shift(M_shift16_shift)
  );
  
  always @* begin
    M_add16_a = a;
    M_add16_b = b;
    M_add16_alufn = alufn[0+1-:2];
    M_bool16_a = a;
    M_bool16_b = b;
    M_bool16_aLUFN = alufn[0+3-:4];
    M_shift16_inpa = a;
    M_shift16_inpb = b;
    M_shift16_alufn = alufn[0+1-:2];
    M_cmp16_z = M_add16_z;
    M_cmp16_n = M_add16_n;
    M_cmp16_v = M_add16_v;
    M_cmp16_alufn = alufn;
    alu = 1'h0;
    
    case (alufn[4+1-:2])
      2'h0: begin
        alu = M_add16_outputsum;
      end
      2'h1: begin
        alu = M_bool16_bool;
      end
      2'h2: begin
        alu = M_shift16_shift;
      end
      2'h3: begin
        alu = M_cmp16_cmp;
      end
    endcase
  end
endmodule
