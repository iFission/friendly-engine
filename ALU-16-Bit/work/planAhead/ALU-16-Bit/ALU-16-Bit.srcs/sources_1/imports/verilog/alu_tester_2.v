/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_tester_2 (
    input clk,
    input rst,
    output reg [7:0] led_result,
    output reg [7:0] led_test
  );
  
  
  
  reg [26:0] M_counter_d, M_counter_q = 1'h0;
  localparam ONE_test_case = 4'd0;
  localparam TWO_test_case = 4'd1;
  localparam THREE_test_case = 4'd2;
  localparam FOUR_test_case = 4'd3;
  localparam FIVE_test_case = 4'd4;
  localparam SIX_test_case = 4'd5;
  localparam SEVEN_test_case = 4'd6;
  localparam EIGHT_test_case = 4'd7;
  localparam PASS_test_case = 4'd8;
  
  reg [3:0] M_test_case_d, M_test_case_q = ONE_test_case;
  
  wire [16-1:0] M_alu16_alu;
  reg [6-1:0] M_alu16_alufn;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu16_3 alu16 (
    .alufn(M_alu16_alufn),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .alu(M_alu16_alu)
  );
  
  always @* begin
    M_test_case_d = M_test_case_q;
    M_counter_d = M_counter_q;
    
    M_counter_d = M_counter_q + 1'h1;
    led_test = 1'h0;
    led_result = 1'h0;
    led_test = 1'h0;
    M_alu16_a = 16'h0000;
    M_alu16_b = 16'h0000;
    M_alu16_alufn = 6'h00;
    
    case (M_test_case_q)
      ONE_test_case: begin
        led_test = 8'h80;
        M_alu16_a = 16'h0000;
        M_alu16_b = 16'h0000;
        M_alu16_alufn = 6'h00;
        if (M_alu16_alu == 16'h0000) begin
          led_result = 8'h80;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            M_test_case_d = TWO_test_case;
          end
        end
      end
      TWO_test_case: begin
        led_test = 8'h40;
        M_alu16_a = 16'h0000;
        M_alu16_b = 16'h0001;
        M_alu16_alufn = 6'h00;
        if (M_alu16_alu == 16'h0001) begin
          led_result = 8'hc0;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            M_test_case_d = THREE_test_case;
          end
        end
      end
      THREE_test_case: begin
        led_test = 8'h20;
        M_alu16_a = 16'h0000;
        M_alu16_b = 16'h0000;
        M_alu16_alufn = 6'h18;
        if (M_alu16_alu == 16'h0000) begin
          led_result = 8'he0;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            M_test_case_d = FOUR_test_case;
          end
        end
      end
      FOUR_test_case: begin
        led_test = 8'h10;
        M_alu16_a = 16'h0001;
        M_alu16_b = 16'h0001;
        M_alu16_alufn = 6'h18;
        if (M_alu16_alu == 16'h0001) begin
          led_result = 8'hf0;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            M_test_case_d = FIVE_test_case;
          end
        end
      end
      FIVE_test_case: begin
        led_test = 8'h08;
        M_alu16_a = 16'h0001;
        M_alu16_b = 16'h0001;
        M_alu16_alufn = 6'h20;
        if (M_alu16_alu == 16'h0002) begin
          led_result = 8'hf8;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            M_test_case_d = SIX_test_case;
          end
        end
      end
      SIX_test_case: begin
        led_test = 8'h04;
        M_alu16_a = 16'h0001;
        M_alu16_b = 16'h0005;
        M_alu16_alufn = 6'h20;
        if (M_alu16_alu == 16'h0020) begin
          led_result = 8'hfc;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            M_test_case_d = SEVEN_test_case;
          end
        end
      end
      SEVEN_test_case: begin
        led_test = 8'h02;
        M_alu16_a = 16'h0000;
        M_alu16_b = 16'h0000;
        M_alu16_alufn = 6'h33;
        if (M_alu16_alu == 16'h0001) begin
          led_result = 8'hfe;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            M_test_case_d = EIGHT_test_case;
          end
        end
      end
      EIGHT_test_case: begin
        led_test = 8'h01;
        M_alu16_a = 16'h0000;
        M_alu16_b = 16'h0000;
        M_alu16_alufn = 6'h35;
        if (M_alu16_alu == 16'h0000) begin
          led_result = 8'hff;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            M_test_case_d = PASS_test_case;
          end
        end
      end
      PASS_test_case: begin
        led_test = 8'hff;
        led_result = 8'hff;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_test_case_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_test_case_q <= M_test_case_d;
    end
  end
  
endmodule
