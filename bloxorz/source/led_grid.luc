/*
Programmed format:
0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 
16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63

LED grid format:
15 14 13 12 11 10 9  8  7  6  5  4  3  2  1  0   <-- start here
16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32
48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63
.......

This modules is reponsible for generating the necessary signals to interface with a 16x16 serial grid of 2812C LEDs
Inputs:
1) map - represents the current stage that we are playing in the programmed format
2) win_pos - represents the position of the win tile in the programmed format
3) player_pos - represents the position of the block in the programmed format
              - the first 8 bits represent the 'back' portion of the block, while the last 8 bits represent the 'front' 
                portion of the block. 
              - when the block is in vertical mode, utilising only one tile, the 'back' portion is set to 0.
              - e.g (1010001110100100) mean horizontal mode at programmed format position (163,164)
              - e.g (1010010000000000) mean vertical mode at programmed format position (164)
4) update - boolean that interrupts the FSM to stay in reset mode, unless it is true.
Outputs:
1) led - represents the variable that sends the signal the LED grid
2) pixel - represents the variable that holds which LED we are currently on. Created in the event, it was needed in other
            applications.
*/

module led_grid #(
    PIXEL_COUNT = 256 : PIXEL_COUNT > 0    // The number of LEDs in the grid.
  )(
    input clk,  // clock
    input rst,  // reset
    input map[256],                     //Map that needs to be displayed
    input win_pos[8],                   //win position to be displayed, different for each map
    input player_pos[16],               //Position of player, first 8 bits show the position of the 'back' block and the last 8 bits are the 'front' block 
    output pixel[$clog2(PIXEL_COUNT)],  //Index of the LED that is being displayed at the moment
    output led,                         //Signal output to the LED
    input update                        //Ensures that fsm is always in send pixel mode, and to reinitialise pixel to 0
  ) {
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {SEND_PIXEL, RESET};
      dff player_front[8];                          //Keeps track of the bits that code for the 'front' portion of the block.
      dff player_back[8];                           //Keeps track of the bits that code for the 'back' portion of the block.
      dff win_pos_xy[8];                            //Keeps track of the winning position of each map
      dff pixel_ctr[$clog2(PIXEL_COUNT)];           //Keeps track of which pixel of the LED we are currently on
      dff bit_ctr[5];                               //Keeps track of which colour bit that is being displayed
      dff ctr[6];                                   //Keeps track of which part of the signal is being output
      dff rst_ctr [$clog2(2500)];

      led_lookup lookupfront;                       // lookup instantiation for front portion of block
      led_lookup lookupback;                        // lookup instantiation for back portion of block 
      led_lookup lookupwin;                         // lookup instantiation for winp position
    }
  }
  
  // Signals for each colour that we need to show
  sig bitsR[24];       
  sig bitsG[24];
  sig bitsB[24];
  sig bitsY[24];
  sig bitsO[24];
  sig maplayout[256];
  
  always {
    led = 0;
    
    //Extracting 'back' block from input and finding the position in the LED grid to be displayed.
    lookupback.value=player_pos[7:0];
    player_back.d=lookupback.outvalue;       //Using the lookup table to find the relative position for the LED grid

   //Extracting 'front' block from input and finding the position in the LED grid to be displayed.
    lookupfront.value=player_pos[15:8];
    player_front.d=lookupfront.outvalue;     //Using the lookup table to find the relative position for the LED grid

    //Extracting win position from input and finding the position in the LED grid to be displayed.
    lookupwin.value=win_pos;
    win_pos_xy.d=lookupwin.outvalue;          //Using the lookup table to find the relative position for the LED grid
    
    bitsR = 24b111111110000000000000000;      //24 bit code for blue
    bitsG = 24b000000001111111100000000;      //24 bit code for red
    bitsB = 24b000000000000000011111111;      //24 bit code for green
    bitsY = 24b000000001111111111111111;      //24 bit code for yellow
    bitsO = 24x{b0};                          //24 bit code for blank
    
    //'Flips' the sequence of each odd row. This makes the LEG grid accept and display maps that are in the programmed format above.
    maplayout=c{map[0],map[1],map[2],map[3],map[4],map[5],map[6],map[7],map[8],map[9],map[10],map[11],map[12],map[13],map[14],map[15],
                map[31],map[30],map[29],map[28],map[27],map[26],map[25],map[24],map[23],map[22],map[21],map[20],map[19],map[18],map[17],map[16],
                map[32],map[33],map[34],map[35],map[36],map[37],map[38],map[39],map[40],map[41],map[42],map[43],map[44],map[45],map[46],map[47],
                map[63],map[62],map[61],map[60],map[59],map[58],map[57],map[56],map[55],map[54],map[53],map[52],map[51],map[50],map[49],map[48],
                map[64],map[65],map[66],map[67],map[68],map[69],map[70],map[71],map[72],map[73],map[74],map[75],map[76],map[77],map[78],map[79],
                map[95],map[94],map[93],map[92],map[91],map[90],map[89],map[88],map[87],map[86],map[85],map[84],map[83],map[82],map[81],map[80],
                map[96],map[97],map[98],map[99],map[100],map[101],map[102],map[103],map[104],map[105],map[106],map[107],map[108],map[109],map[110],map[111],
                map[127],map[126],map[125],map[124],map[123],map[122],map[121],map[120],map[119],map[118],map[117],map[116],map[115],map[114],map[113],map[112],
                map[128],map[129],map[130],map[131],map[132],map[133],map[134],map[135],map[136],map[137],map[138],map[139],map[140],map[141],map[142],map[143],
                map[159],map[158],map[157],map[156],map[155],map[154],map[153],map[152],map[151],map[150],map[149],map[148],map[147],map[146],map[145],map[144],
                map[160],map[161],map[162],map[163],map[164],map[165],map[166],map[167],map[168],map[169],map[170],map[171],map[172],map[173],map[174],map[175],
                map[191],map[190],map[189],map[188],map[187],map[186],map[185],map[184],map[183],map[182],map[181],map[180],map[179],map[178],map[177],map[176],
                map[192],map[193],map[194],map[195],map[196],map[197],map[198],map[199],map[200],map[201],map[202],map[203],map[204],map[205],map[206],map[207],
                map[223],map[222],map[221],map[220],map[219],map[218],map[217],map[216],map[215],map[214],map[213],map[212],map[211],map[210],map[209],map[208],
                map[224],map[225],map[226],map[227],map[228],map[229],map[230],map[231],map[232],map[233],map[234],map[235],map[236],map[237],map[238],map[239],
                map[255],map[254],map[253],map[252],map[251],map[250],map[250],map[248],map[247],map[246],map[245],map[244],map[243],map[242],map[241],map[240]};
    
    pixel = pixel_ctr.q;                      
    case (state.q) {
      state.SEND_PIXEL:

          /*
          To specify the colour of the LED, we need to supply 24 bits of information. These bits are specified in the 
          bitsR, bitsG, bitsB, bitsY and bitsO signals.
          The colour we are specifying depends on whether the LED is supposed to represent the map, player, win, or blank.

          The LED clock cycle is much slower than the Mojo. 55 Mojo cycles represent 1 period of  the LED. Therefore,
                - To send an "OFF" signal, we need to send 15x1 followed by 40x0
                - To send an "ON" signal, we need to send 40x1 followed by 15x0
          */

        //Display blank to the pixel "0" if player is in potrait orientation
        if (pixel_ctr.q==0||pixel_ctr.q==15||pixel_ctr.q==255||pixel_ctr.q==240){
          if (bitsO[bit_ctr.q])                                   //Checks to send OFF or ON
            led = ctr.q <40;                                      //Sending ON signal
          else
            led = ctr.q < 15;                                     //Sending OFF signal
          
          ctr.d = ctr.q + 1;
          if (ctr.q == 55){                                       //Checks if 1 LED period has elapsed
            ctr.d = 0;                                            //Reset counter to 0 if so.
            bit_ctr.d = bit_ctr.q + 1;                            //Move to the next bit of the colour array
            
            if (bit_ctr.q == 23) {                                //Checks if all 24 bits of the colour has elapsed                          
              bit_ctr.d = 0;                                      //Resets colour bit counter
              pixel_ctr.d = pixel_ctr.q + 1;                      //Moves to next pixel in grid

              if (pixel_ctr.q == PIXEL_COUNT-1) {                 //Checks if reached the end of the grid
                pixel_ctr.d = 0;                                  //Resets to the start of the grid
                state.d = state.RESET;                            //Go into RESET state
              }
            }
          }
        }

        //Display yellow for Vertical player position, when the first 8 bits are supposed to be 8b00000000
        else if(player_back.q==15 & pixel_ctr.q==player_front.q){
          if (bitsY[bit_ctr.q])
            led = ctr.q <40;
          else
            led = ctr.q < 15;
          
          ctr.d = ctr.q + 1;
          if (ctr.q == 55){
            ctr.d = 0;
            
            bit_ctr.d = bit_ctr.q + 1;
            if (bit_ctr.q == 23) {
              bit_ctr.d = 0;
              pixel_ctr.d = pixel_ctr.q + 1;
              if (pixel_ctr.q == PIXEL_COUNT-1) {
                pixel_ctr.d = 0;
                state.d = state.RESET;
              }
              }
            }
        }

        //Display red for Horizontaol player position
        else if(pixel_ctr.q==player_back.q||pixel_ctr.q==player_front.q){
          if (bitsG[bit_ctr.q])
            led = ctr.q <40;
          else
            led = ctr.q < 15;
          
          ctr.d = ctr.q + 1;
          if (ctr.q == 55){
            ctr.d = 0;
            
            bit_ctr.d = bit_ctr.q + 1;
            if (bit_ctr.q == 23) {
              bit_ctr.d = 0;
              pixel_ctr.d = pixel_ctr.q + 1;
              if (pixel_ctr.q == PIXEL_COUNT-1) {
                pixel_ctr.d = 0;
                state.d = state.RESET;
              }
              }
            }
        }
        
        //Display green for win pixel
        else if(pixel_ctr.q==win_pos_xy.q){
          if (bitsB[bit_ctr.q])
            led = ctr.q <40;
          else
            led = ctr.q < 15;
          
          ctr.d = ctr.q + 1;
          if (ctr.q == 55){
            ctr.d = 0;
            
            bit_ctr.d = bit_ctr.q + 1;
            if (bit_ctr.q == 23) {
              bit_ctr.d = 0;
              pixel_ctr.d = pixel_ctr.q + 1;
              if (pixel_ctr.q == PIXEL_COUNT-1) {
                pixel_ctr.d = 0;
                state.d = state.RESET;
              }
              }
            }
        }
        
        //Display blue for stage pixels
        else if (maplayout[pixel_ctr.q]){
          if (bitsR[bit_ctr.q])
            led = ctr.q <40;
          else
            led = ctr.q < 15;
          
          ctr.d = ctr.q + 1;
          if (ctr.q == 55){
            ctr.d = 0;
            
            bit_ctr.d = bit_ctr.q + 1;
            if (bit_ctr.q == 23) {
              bit_ctr.d = 0;
              pixel_ctr.d = pixel_ctr.q + 1;
                
              if (pixel_ctr.q == PIXEL_COUNT-1) {
                pixel_ctr.d = 0;
                state.d = state.RESET;
              }
            }
          }
        }

        //Display blank for pixels that are not needed.
        else{
          if (bitsO[bit_ctr.q])
            led = ctr.q <40;
          else
            led = ctr.q < 15;
          
          ctr.d = ctr.q + 1;
          if (ctr.q == 55){
            ctr.d = 0;
            
            bit_ctr.d = bit_ctr.q + 1;
            if (bit_ctr.q == 23) {
              bit_ctr.d = 0;
              pixel_ctr.d = pixel_ctr.q + 1;
              
              if (pixel_ctr.q == PIXEL_COUNT-1) {
                pixel_ctr.d = 0;
                state.d = state.RESET;
              }
              }
            }
        }
      
      state.RESET:
      //Reset counter is always zero
        if (&rst_ctr.q) {
          //Update is always on, therefore, always goes to SEND PIXEL state.
          if (update) {
            rst_ctr.d = 0;
            state.d = state.SEND_PIXEL;
          }
        } else {
          rst_ctr.d = rst_ctr.q + 1;
        }
    }
  }
}