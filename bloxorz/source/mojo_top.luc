module mojo_top(
    input clk,             // 50MHz clock
    input rst_n,           // reset button (active low)
    output led[8],         // 8 user controllable LEDs
    input cclk,            // configuration clock, AVR ready when high
    output spi_miso,       // AVR SPI MISO
    input spi_ss,          // AVR SPI Slave Select
    input spi_mosi,        // AVR SPI MOSI
    input spi_sck,         // AVR SPI Clock
    output spi_channel[4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,          // AVR TX (FPGA RX)
    output avr_rx,         // AVR RX (FPGA TX)
    input avr_rx_busy,     // AVR RX buffer full

    output io_led[3][8], // LEDs on IO Shield
    output io_seg[8],    // 7-segment LEDs on IO Shield
    output io_sel[4],    // Digit select on IO Shield
    input io_button[5],  // 5 buttons on IO Shield
    input io_dip[3][8],   // DIP switches on IO Shield

    output outled,
    
    input button_up,
    input button_down,
    input button_left,
    input button_right,
    input button_reset,
    input button_stage_left,
    input button_stage_right
)
{

    sig rst; // reset signal

    .clk(clk)
    {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond;

        // button input conditioner for io buttons
        button_conditioner io_button_left_button_conditioner;
        button_conditioner io_button_right_button_conditioner;
        button_conditioner io_button_centre_button_conditioner;
        button_conditioner io_button_up_button_conditioner;
        button_conditioner io_button_down_button_conditioner;

        // button input conditioner for arcade buttons
        button_conditioner button_up_conditioner;
        button_conditioner button_down_conditioner;
        button_conditioner button_left_conditioner;
        button_conditioner button_right_conditioner;
        button_conditioner button_reset_conditioner;
        button_conditioner button_stage_left_conditioner;
        button_conditioner button_stage_right_conditioner;

        // detect rising edges for io buttons
        edge_detector io_button_up_edge_detector(#RISE(1), #FALL(0));
        edge_detector io_button_down_edge_detector(#RISE(1), #FALL(0));
        edge_detector io_button_left_edge_detector(#RISE(1), #FALL(0));
        edge_detector io_button_right_edge_detector(#RISE(1), #FALL(0));
        edge_detector io_button_centre_edge_detector(#RISE(1), #FALL(0));

        // detect rising edges for arcade buttons
        edge_detector button_up_edge_detector(#RISE(1), #FALL(0));
        edge_detector button_down_edge_detector(#RISE(1), #FALL(0));
        edge_detector button_left_edge_detector(#RISE(1), #FALL(0));
        edge_detector button_right_edge_detector(#RISE(1), #FALL(0));
        edge_detector button_reset_edge_detector(#RISE(1), #FALL(0));
        edge_detector button_stage_left_edge_detector(#RISE(1), #FALL(0));
        edge_detector button_stage_right_edge_detector(#RISE(1), #FALL(0));

        .rst(rst)
        {
            game game;
            ledprocess led_grid;
        }
    }

    always
    {
        reset_cond.in = ~rst_n; // input raw inverted reset signal
        rst = reset_cond.out;   // conditioned reset

        led = 8h00;           // turn LEDs off
        spi_miso = bz;        // not using SPI
        spi_channel = bzzzz;  // not using flags
        avr_rx = bz;          // not using serial port
        io_led = 3x{{8h00}}; // turn LEDs off
        io_seg = 8hff;        // turn segments off
        io_sel = 4hf;         // select no digits

        // io button up
        io_button_up_button_conditioner.in = io_button[0]; // to reduce the bouncing effects of your button
        io_button_up_edge_detector.in = io_button_up_button_conditioner.out; // get the edge of button press

        // io button centre
        io_button_centre_button_conditioner.in = io_button[1];
        io_button_centre_edge_detector.in = io_button_centre_button_conditioner.out;

        // io button down
        io_button_down_button_conditioner.in = io_button[2];
        io_button_down_edge_detector.in = io_button_down_button_conditioner.out;

        // io button left
        io_button_left_button_conditioner.in = io_button[3];
        io_button_left_edge_detector.in = io_button_left_button_conditioner.out;

        // io button right
        io_button_right_button_conditioner.in = io_button[4];
        io_button_right_edge_detector.in = io_button_right_button_conditioner.out;
        
        // arcade button up
        button_up_conditioner.in = button_up; // to reduce the bouncing effects of your button
        button_up_edge_detector.in = button_up_conditioner.out; // get the edge of button press

        // arcade button down
        button_down_conditioner.in = button_down;
        button_down_edge_detector.in = button_down_conditioner.out;

        // arcade button left
        button_left_conditioner.in = button_left;
        button_left_edge_detector.in = button_left_conditioner.out;

        // arcade button right
        button_right_conditioner.in = button_right;
        button_right_edge_detector.in = button_right_conditioner.out;

        // arcade button reset
        button_reset_conditioner.in = button_reset;
        button_reset_edge_detector.in = button_reset_conditioner.out;

        // arcade button stage left
        button_stage_left_conditioner.in = button_stage_left;
        button_stage_left_edge_detector.in = button_stage_left_conditioner.out;

        // arcade button stage right
        button_stage_right_conditioner.in = button_stage_right;
        button_stage_right_edge_detector.in = button_stage_right_conditioner.out;
    
        case(io_dip[0][0]){ // debug switch
            0: // if debug false, use arcade buttons
                game.button_up = button_up_edge_detector.out;
                game.button_down = button_down_edge_detector.out;
                game.button_left = button_left_edge_detector.out;
                game.button_right = button_right_edge_detector.out;
                game.button_reset = button_reset_edge_detector.out;
                game.button_stage_left = button_stage_left_edge_detector.out;
                game.button_stage_right = button_stage_right_edge_detector.out;
            1: // if debug true, use io buttons
                game.button_up = io_button_up_edge_detector.out;
                game.button_reset = io_button_centre_edge_detector.out;
                game.button_down = io_button_down_edge_detector.out;
                game.button_left = io_button_left_edge_detector.out;
                game.button_right = io_button_right_edge_detector.out;
                game.button_stage_left = button_stage_left_edge_detector.out;
                game.button_stage_right = button_stage_right_edge_detector.out;
            default: // default use arcade buttons
                game.button_up = button_up_edge_detector.out;
                game.button_down = button_down_edge_detector.out;
                game.button_left = button_left_edge_detector.out;
                game.button_right = button_right_edge_detector.out;
                game.button_reset = button_reset_edge_detector.out;
                game.button_stage_left = button_stage_left_edge_detector.out;
                game.button_stage_right = button_stage_right_edge_detector.out;

        }

        // io led output
        io_led[1] = game.player_position_out[15:8];
        io_led[0] = game.player_position_out[7:0];

        // debug output
        io_led[2][7] = game.portrait_orientation_out;
        io_led[2][6] = game.horizontal_orientation_out;
        io_led[2][5] = game.vertical_orientation_out;

        // led grid output for map
        led_grid.update=1;
        led_grid.win_pos = game.win_position_out;        //x=7, y=5
        led_grid.player_pos = game.player_position_out;    //8,8 and 8,9
        led_grid.map=256x{b1};
        //led_grid.map = game.map_out;
        outled = led_grid.led;

    }
}