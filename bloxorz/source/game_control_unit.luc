module control_unit (
    input clk,  // clock
    input rst,  // reset

    input button_up,
    input button_down,
    input button_left,
    input button_right,

    // output to regfile
    output write_address[3],
    output write_enable,
    output input_data[256],
    output read_address_a[3],
    output read_address_b[3],

    // output to alu16
    output alufn[6],

    // output datapath
    output a_select,
    output b_select[3],
    output wd_select[2],

    input output_a,
    input output_b,

    // debug io
    input io_dip[8],

    input map_in[256],
    input player_position_in[16],
    input player_position_in_init[16],
    input win_position_in[8],
    input win_bool_in,
    input loss_bool_in,
    input portrait_orientation_in,
    input horizontal_orientation_in,
    input vertical_orientation_in,

    output player_position_out[16],
    output win_bool_out,
    output loss_bool_out,
    output portrait_orientation_out,
    output horizontal_orientation_out,
    output vertical_orientation_out
  ) 

{
  .clk(clk){
    .rst(rst){
      fsm movement_fsm = {
        START,
        PORTRAIT_ORIENTATION_IDLE,
        PORTRAIT_ORIENTATION_CHECK_WIN,
        PORTRAIT_ORIENTATION_WRITE_WIN,
        PORTRAIT_ORIENTATION_CHECK_LOSS,
        HORIZONTAL_ORIENTATION,
        VERTICAL_ORIENTATION,
        PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_1,
        PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_2,
        PORTRAIT_ORIENTATION_LEFT_UPDATE_PORTRAIT_ORIENTATION,
        PORTRAIT_ORIENTATION_LEFT_UPDATE_HORIZONTAL_ORIENTATION,
        PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_1,
        PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_2,
        PORTRAIT_ORIENTATION_RIGHT_UPDATE_PORTRAIT_ORIENTATION,
        PORTRAIT_ORIENTATION_RIGHT_UPDATE_HORIZONTAL_ORIENTATION,
        PORTRAIT_ORIENTATION_UP_UPDATE_PLAYER_POSITION_1,
        PORTRAIT_ORIENTATION_UP_UPDATE_PLAYER_POSITION_2,
        PORTRAIT_ORIENTATION_UP_UPDATE_PORTRAIT_ORIENTATION,
        PORTRAIT_ORIENTATION_UP_UPDATE_HORIZONTAL_ORIENTATION,
        PORTRAIT_ORIENTATION_DOWN_UPDATE_PLAYER_POSITION_1,
        PORTRAIT_ORIENTATION_DOWN_UPDATE_PLAYER_POSITION_2,
        PORTRAIT_ORIENTATION_DOWN_UPDATE_PORTRAIT_ORIENTATION,
        PORTRAIT_ORIENTATION_DOWN_UPDATE_HORIZONTAL_ORIENTATION
        };
    }
  }
  
  always {
    // initialise default datapath output
    write_address = 0;
    write_enable = 0;
    input_data = 0;
    read_address_a = io_dip;
    read_address_b = 0;
    alufn = 0;
    a_select = 0;
    b_select = 0;
    wd_select = 0;

    player_position_out = player_position_in;
    win_bool_out = win_bool_in;
    loss_bool_out = loss_bool_in;
    portrait_orientation_out = portrait_orientation_in;
    horizontal_orientation_out = horizontal_orientation_in;
    vertical_orientation_out = vertical_orientation_in;

    case(movement_fsm.q){
      movement_fsm.START:
        player_position_out = player_position_in_init;
        win_bool_out = 0;
        loss_bool_out = 0;
        portrait_orientation_out = 1;
        horizontal_orientation_out = 0;
        vertical_orientation_out = 0;

        movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_CHECK_WIN;

      movement_fsm.PORTRAIT_ORIENTATION_IDLE:
          if (button_left == 1)
          {
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_1;
          }
          if (button_right == 1)
          {
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_1;
          }
          if (button_up == 1)
          {
            player_position_out[15:8] = player_position_in[15:8] - 32;
            player_position_out[7:0] = player_position_in[15:8] - 16;
            vertical_orientation_out = 1;
            portrait_orientation_out = 0;
            movement_fsm.d = movement_fsm.VERTICAL_ORIENTATION;
          }
          if (button_down == 1)
          {
            player_position_out[15:8] = player_position_in[15:8] + 16;
            player_position_out[7:0] = player_position_in[15:8] + 32;
            vertical_orientation_out = 1;
            portrait_orientation_out = 0;
            movement_fsm.d = movement_fsm.VERTICAL_ORIENTATION;
          }

      movement_fsm.PORTRAIT_ORIENTATION_CHECK_WIN:
          // check orientation is portrait and is on win position to determine WIN
          // read_address_a = 3b001;
          // read_address_b = 3b010;

          // if (output_a[15-:8] == output_b[7-:8])
          if (player_position_in[15:8] == win_position_in)
          {

            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_WRITE_WIN;
          }
          else {
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_CHECK_LOSS;
          }

      movement_fsm.PORTRAIT_ORIENTATION_WRITE_WIN:
            win_bool_out = 1;
            write_enable = 1;
            write_address = 3b011;
            input_data = 1b1;
            movement_fsm.d = movement_fsm.START;

      movement_fsm.PORTRAIT_ORIENTATION_CHECK_LOSS:
          // check position is out to determine LOSS
          if (map_in[255 - player_position_in[15:8]] == 0){
            // loss_bool_out = 1;
            write_enable = 1;
            write_address = 3b100;
            input_data = 1b1;            
            movement_fsm.d = movement_fsm.START;
          }
          else {
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_IDLE;
          }


      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_1:
          player_position_out[15:8] = player_position_in[15:8] - 2;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_2;

      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_2:
          player_position_out[7:0] = player_position_in[15:8] + 1;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PORTRAIT_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PORTRAIT_ORIENTATION:
          portrait_orientation_out = 0;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_HORIZONTAL_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_HORIZONTAL_ORIENTATION:
          horizontal_orientation_out = 1;
          movement_fsm.d = movement_fsm.HORIZONTAL_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_1:
          player_position_out[15:8] = player_position_in[15:8] + 1;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_2;

      movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_2:
          player_position_out[7:0] = player_position_in[15:8] + 1;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PORTRAIT_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PORTRAIT_ORIENTATION:
          portrait_orientation_out = 0;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_HORIZONTAL_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_HORIZONTAL_ORIENTATION:
          horizontal_orientation_out = 1;
          movement_fsm.d = movement_fsm.HORIZONTAL_ORIENTATION;

      movement_fsm.VERTICAL_ORIENTATION:
          if (button_left == 1)
          {
            player_position_out[15:8] = player_position_in[15:8] - 1;
            player_position_out[7:0] = player_position_in[7:0] - 1;
            movement_fsm.d = movement_fsm.VERTICAL_ORIENTATION;
          }
          if (button_right == 1)
          {
            player_position_out[15:8] = player_position_in[15:8] + 1;
            player_position_out[7:0] = player_position_in[7:0] + 1;
            movement_fsm.d = movement_fsm.VERTICAL_ORIENTATION;
          }
          if (button_up == 1)
          {
            player_position_out[15:8] = player_position_in[15:8] - 16;
            player_position_out[7:0] = 0;
            vertical_orientation_out = 0;
            portrait_orientation_out = 1;
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_CHECK_WIN;
          }
          if (button_down == 1)
          {
            player_position_out[15:8] = player_position_in[15:8] + 32;
            player_position_out[7:0] = 0;
            vertical_orientation_out = 0;
            portrait_orientation_out = 1;
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_CHECK_WIN;
          }
          // check position of first and last 8 bits is out to determine OUT
          if (map_in[255 - player_position_in[15:8]] == 0 || map_in[255 - player_position_in[7:0]] == 0){
            // loss_bool_out = 1;
            write_enable = 1;
            write_address = 3b100;
            input_data = 1b1;
            }

      movement_fsm.HORIZONTAL_ORIENTATION:
          if (button_left == 1)
          {
            player_position_out[15:8] = player_position_in[15:8] - 1;
            player_position_out[7:0] = 0;
            horizontal_orientation_out = 0;
            portrait_orientation_out = 1;
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_CHECK_WIN;
          }
          if (button_right == 1)
          {
            player_position_out[15:8] = player_position_in[15:8] + 2;
            player_position_out[7:0] = 0;
            horizontal_orientation_out = 0;
            portrait_orientation_out = 1;
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_CHECK_WIN;
          }
          if (button_up == 1)
          {
            player_position_out[15:8] = player_position_in[15:8] - 16;
            player_position_out[7:0] = player_position_in[7:0] - 16;
            movement_fsm.d = movement_fsm.HORIZONTAL_ORIENTATION;
          }
          if (button_down == 1)
          {
            player_position_out[15:8] = player_position_in[15:8] + 16;
            player_position_out[7:0] = player_position_in[7:0] + 16;
            movement_fsm.d = movement_fsm.HORIZONTAL_ORIENTATION;
          }
          // check position of first and last 8 bits is out to determine OUT
          if (map_in[255 - player_position_in[15:8]] == 0 || map_in[255 - player_position_in[7:0]] == 0){
            movement_fsm.d = movement_fsm.START;
          }
    }
  }
}
