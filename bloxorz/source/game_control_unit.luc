module control_unit (
    input clk,  // clock
    input rst,  // reset

    input button_up,
    input button_down,
    input button_left,
    input button_right,
    input button_centre,

    // output to regfile
    output write_address[4],
    output write_enable,
    output read_address_a[4],
    output read_address_b[4],

    // output to alu16
    output alufn[6],

    // output datapath
    output a_select,
    output b_select[3],
    output wd_select[2],

    input output_a,
    input output_b,

    // debug io
    input io_dip[8],

    input map_in[256],
    input player_position_1_in[8],
    input player_position_2_in[8],
    input player_position_in_init[8],
    input win_position_in[8],
    input win_bool_in,
    input loss_bool_in,
    input portrait_orientation_in,
    input horizontal_orientation_in,
    input vertical_orientation_in,

    output player_position_1_out[8],
    output player_position_2_out[8],
    output win_bool_out,
    output loss_bool_out,
    output portrait_orientation_out,
    output horizontal_orientation_out,
    output vertical_orientation_out,

    output state_index[8]
  ) 

{
  .clk(clk){
    .rst(rst){
      fsm movement_fsm = {
        START,
        PORTRAIT_ORIENTATION_IDLE,
        PORTRAIT_ORIENTATION_CHECK_WIN,
        PORTRAIT_ORIENTATION_WRITE_WIN,
        PORTRAIT_ORIENTATION_CHECK_LOSS,
        HORIZONTAL_ORIENTATION,
        VERTICAL_ORIENTATION,
        PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_1,
        PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_2,PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_1_CHECK,
        PORTRAIT_ORIENTATION_LEFT_UPDATE_PORTRAIT_ORIENTATION,
        PORTRAIT_ORIENTATION_LEFT_UPDATE_HORIZONTAL_ORIENTATION,
        PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_1,
        PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_2,
        PORTRAIT_ORIENTATION_RIGHT_UPDATE_PORTRAIT_ORIENTATION,
        PORTRAIT_ORIENTATION_RIGHT_UPDATE_HORIZONTAL_ORIENTATION,
        PORTRAIT_ORIENTATION_UP_UPDATE_PLAYER_POSITION_1,
        PORTRAIT_ORIENTATION_UP_UPDATE_PLAYER_POSITION_2,
        PORTRAIT_ORIENTATION_UP_UPDATE_PORTRAIT_ORIENTATION,
        PORTRAIT_ORIENTATION_UP_UPDATE_HORIZONTAL_ORIENTATION,
        PORTRAIT_ORIENTATION_DOWN_UPDATE_PLAYER_POSITION_1,
        PORTRAIT_ORIENTATION_DOWN_UPDATE_PLAYER_POSITION_2,
        PORTRAIT_ORIENTATION_DOWN_UPDATE_PORTRAIT_ORIENTATION,
        PORTRAIT_ORIENTATION_DOWN_UPDATE_HORIZONTAL_ORIENTATION
        };
    }
  }
  
  always {
    // initialise default datapath output
    write_address = 0;
    write_enable = 0;
    read_address_a = io_dip[7-:4];
    read_address_b = 0;
    alufn = 0;
    a_select = 0;
    b_select = 0;
    wd_select = 0;

    player_position_1_out = player_position_1_in;
    player_position_2_out = player_position_2_in;
    win_bool_out = win_bool_in;
    loss_bool_out = loss_bool_in;
    portrait_orientation_out = portrait_orientation_in;
    horizontal_orientation_out = horizontal_orientation_in;
    vertical_orientation_out = vertical_orientation_in;

    state_index = 0;

    case(movement_fsm.q){
      movement_fsm.START:
        player_position_1_out = player_position_in_init;
        player_position_2_out = 0;
        win_bool_out = 0;
        loss_bool_out = 0;
        portrait_orientation_out = 1;
        horizontal_orientation_out = 0;
        vertical_orientation_out = 0;

        state_index = 1;

        movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_CHECK_WIN;

      movement_fsm.PORTRAIT_ORIENTATION_IDLE:
          state_index = 2;
          if (button_left == 1)
          {
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_1;
          }
          if (button_right == 1)
          {
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_1;
          }
          if (button_up == 1)
          {
            player_position_1_out = player_position_1_in - 32;
            player_position_2_out = player_position_1_in - 16;
            vertical_orientation_out = 1;
            portrait_orientation_out = 0;
            movement_fsm.d = movement_fsm.VERTICAL_ORIENTATION;
          }
          if (button_down == 1)
          {
            player_position_1_out = player_position_1_in + 16;
            player_position_2_out = player_position_1_in + 32;
            vertical_orientation_out = 1;
            portrait_orientation_out = 0;
            movement_fsm.d = movement_fsm.VERTICAL_ORIENTATION;
          }

      movement_fsm.PORTRAIT_ORIENTATION_CHECK_WIN:
          state_index = 3;
          // check orientation is portrait and is on win position to determine WIN
          read_address_a = 4b0001;
          read_address_b = 4b0011;

          if (button_centre){
          if (output_a == output_b)
          // if (player_position_1_in == win_position_in)
          {

            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_WRITE_WIN;
          }
          else {
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_CHECK_LOSS;
          }
          }

      movement_fsm.PORTRAIT_ORIENTATION_WRITE_WIN:
          state_index = 4;
          // win_bool_out = 1;
          write_enable = 1;
          write_address = 4b0100;
          wd_select = 2b10;
          if (button_centre){
          movement_fsm.d = movement_fsm.START;
          }
          
      movement_fsm.PORTRAIT_ORIENTATION_CHECK_LOSS:
          state_index = 5;
          // check position is out to determine LOSS
          if (button_centre){
          if (map_in[255 - player_position_1_in] == 0){
            // loss_bool_out = 1;
            write_enable = 1;
            write_address = 4b0101;
            // input_data = 1b1;            
            movement_fsm.d = movement_fsm.START;
          }
          else {
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_IDLE;
          }
          }


      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_1:
          state_index = 6;
          // player_position_1_out = player_position_1_in - 2;
          read_address_a = 4b0001;
          write_address = 4b0001;
          a_select = 1b0;
          b_select = 3b010;
          alufn = 6b000001;
          wd_select = 2b00;
          if (button_centre){
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_1_CHECK;
          }

      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_1_CHECK:
          state_index = 7;
      
          if (button_centre){
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_2;
          }

      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_2:
          state_index = 8;
          player_position_2_out = player_position_1_in + 1;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PORTRAIT_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PORTRAIT_ORIENTATION:
          state_index = 9;
          portrait_orientation_out = 0;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_HORIZONTAL_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_HORIZONTAL_ORIENTATION:
          state_index = 10;
          horizontal_orientation_out = 1;
          movement_fsm.d = movement_fsm.HORIZONTAL_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_1:
          player_position_1_out = player_position_1_in + 1;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_2;

      movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_2:
          player_position_2_out = player_position_1_in + 1;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PORTRAIT_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PORTRAIT_ORIENTATION:
          portrait_orientation_out = 0;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_HORIZONTAL_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_HORIZONTAL_ORIENTATION:
          horizontal_orientation_out = 1;
          movement_fsm.d = movement_fsm.HORIZONTAL_ORIENTATION;

      movement_fsm.VERTICAL_ORIENTATION:
          if (button_left == 1)
          {
            player_position_1_out = player_position_1_in - 1;
            player_position_2_out = player_position_2_in - 1;
            movement_fsm.d = movement_fsm.VERTICAL_ORIENTATION;
          }
          if (button_right == 1)
          {
            player_position_1_out = player_position_1_in + 1;
            player_position_2_out = player_position_2_in + 1;
            movement_fsm.d = movement_fsm.VERTICAL_ORIENTATION;
          }
          if (button_up == 1)
          {
            player_position_1_out = player_position_1_in - 16;
            player_position_2_out = 0;
            vertical_orientation_out = 0;
            portrait_orientation_out = 1;
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_CHECK_WIN;
          }
          if (button_down == 1)
          {
            player_position_1_out = player_position_1_in + 32;
            player_position_2_out = 0;
            vertical_orientation_out = 0;
            portrait_orientation_out = 1;
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_CHECK_WIN;
          }
          // check position of first and last 8 bits is out to determine OUT
          if (map_in[255 - player_position_1_in] == 0 || map_in[255 - player_position_2_in] == 0){
            // loss_bool_out = 1;
            write_enable = 1;
            write_address = 3b100;
            // input_data = 1b1;
            }

      movement_fsm.HORIZONTAL_ORIENTATION:
          if (button_left == 1)
          {
            player_position_1_out = player_position_1_in - 1;
            player_position_2_out = 0;
            horizontal_orientation_out = 0;
            portrait_orientation_out = 1;
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_CHECK_WIN;
          }
          if (button_right == 1)
          {
            player_position_1_out = player_position_1_in + 2;
            player_position_2_out = 0;
            horizontal_orientation_out = 0;
            portrait_orientation_out = 1;
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_CHECK_WIN;
          }
          if (button_up == 1)
          {
            player_position_1_out = player_position_1_in - 16;
            player_position_2_out = player_position_2_in - 16;
            movement_fsm.d = movement_fsm.HORIZONTAL_ORIENTATION;
          }
          if (button_down == 1)
          {
            player_position_1_out = player_position_1_in + 16;
            player_position_2_out = player_position_2_in + 16;
            movement_fsm.d = movement_fsm.HORIZONTAL_ORIENTATION;
          }
          // check position of first and last 8 bits is out to determine OUT
          if (map_in[255 - player_position_1_in] == 0 || map_in[255 - player_position_2_in] == 0){
            movement_fsm.d = movement_fsm.START;
          }
    }
  }
}
