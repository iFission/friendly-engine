module add16 (
    input alufn[2],
    input a[16], // 16 bit input
    input b[16], // 16 bit input
    output z, // z is 1 is all outputs of the sum of a and b are 0
    output v, // v is true if overflow occurs
    output n, // n is true if the sum is negative
    output outputsum[16] // 16 bit sum
  ) {
    sig sum[16]; // sum of A and B in 17 bit
    always{
        case(alufn[1:0]){
        2b00: sum = a+b; // addition when alufn0 set to 0
        2b01: sum = a-b; // subtraction when alufn0 set to 1
        2b10: sum = a*b; // multiplication when alufn[1:0] set to 10
        default: sum = a-b; // default set to subtract for use with cmp16
      }
      outputsum = sum[15:0]; // output sum is 16 bits
      z = ~|sum[15:0]; // true if all 16 bit is 0
      n = sum[15]; // n is true(1) when sum is 16th bit is 1 
      v = (((a[15])&(b[15])&(~sum[15])) | ((~a[15])&(~b[15])&(sum[15]))); // check for overflow per definition in lab3
    }
  }