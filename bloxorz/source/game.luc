module game (
    input clk,  // clock
    input rst,  // reset

    input button_up,
    input button_down,
    input button_left,
    input button_right,
    input button_stage_left,
    input button_stage_right,

    output map_out[256],
    output player_position_out[16],
    output win_position_out[8],
    output win_bool_out,
    output loss_bool_out,
    output portrait_orientation_out,
    output horizontal_orientation_out,
    output vertical_orientation_out,
    output map_index[2]
  ) 

{
  .clk(clk){
    .rst(rst){
      regfile regfile;
      map map;
      fsm movement_fsm = {
        START,
        PORTRAIT_ORIENTATION,
        HORIZONTAL_ORIENTATION,
        VERTICAL_ORIENTATION,
        PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_1,
        PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_2,
        PORTRAIT_ORIENTATION_LEFT_UPDATE_PORTRAIT_ORIENTATION,
        PORTRAIT_ORIENTATION_LEFT_UPDATE_HORIZONTAL_ORIENTATION,
        PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_1,
        PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_2,
        PORTRAIT_ORIENTATION_RIGHT_UPDATE_PORTRAIT_ORIENTATION,
        PORTRAIT_ORIENTATION_RIGHT_UPDATE_HORIZONTAL_ORIENTATION,
        PORTRAIT_ORIENTATION_UP_UPDATE_PLAYER_POSITION_1,
        PORTRAIT_ORIENTATION_UP_UPDATE_PLAYER_POSITION_2,
        PORTRAIT_ORIENTATION_UP_UPDATE_PORTRAIT_ORIENTATION,
        PORTRAIT_ORIENTATION_UP_UPDATE_HORIZONTAL_ORIENTATION,
        PORTRAIT_ORIENTATION_DOWN_UPDATE_PLAYER_POSITION_1,
        PORTRAIT_ORIENTATION_DOWN_UPDATE_PLAYER_POSITION_2,
        PORTRAIT_ORIENTATION_DOWN_UPDATE_PORTRAIT_ORIENTATION,
        PORTRAIT_ORIENTATION_DOWN_UPDATE_HORIZONTAL_ORIENTATION
        };
    }
  }
  
  always {
    // initialise default input to regfile
    regfile.write_address = 0;
    regfile.write_enable = 0;
    regfile.input_data = 0;
    regfile.read_address_a = 0;
    regfile.read_address_b = 0;

    map_out = regfile.map_out;
    player_position_out = regfile.player_position_out;
    win_position_out = regfile.win_position_out;
    win_bool_out = regfile.win_bool_out;
    loss_bool_out = regfile.loss_bool_out;
    portrait_orientation_out = regfile.portrait_orientation_out;
    horizontal_orientation_out = regfile.horizontal_orientation_out;
    vertical_orientation_out = regfile.vertical_orientation_out;

    map_index = map.map_index;

    // input to map fsm
    map.button_stage_left = button_stage_left;
    map.button_stage_right = button_stage_right;
    map.win_bool_in = regfile.win_bool_out;
    map.loss_bool_in = regfile.loss_bool_out;

    regfile.map_in = map.map_out;
    regfile.player_position_in = regfile.player_position_out;
    regfile.win_position_in = map.win_position_out;
    regfile.win_bool_in = regfile.win_bool_out;
    regfile.loss_bool_in = regfile.loss_bool_out;
    regfile.portrait_orientation_in = regfile.portrait_orientation_out;
    regfile.horizontal_orientation_in = regfile.horizontal_orientation_out;
    regfile.vertical_orientation_in = regfile.vertical_orientation_out;

    case(movement_fsm.q){
      movement_fsm.START:
        regfile.map_in = map.map_out;
        regfile.player_position_in = map.player_position_out;
        regfile.win_position_in = map.win_position_out;
        regfile.win_bool_in = 0;
        regfile.loss_bool_in = 0;
        regfile.portrait_orientation_in = 1;
        regfile.horizontal_orientation_in = 0;
        regfile.vertical_orientation_in = 0;

        movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION:
          if (button_left == 1)
          {
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_1;
          }
          if (button_right == 1)
          {
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_1;
          }
          if (button_up == 1)
          {
            regfile.player_position_in[15:8] = regfile.player_position_out[15:8] - 32;
            regfile.player_position_in[7:0] = regfile.player_position_out[15:8] - 16;
            regfile.vertical_orientation_in = 1;
            regfile.portrait_orientation_in = 0;
            movement_fsm.d = movement_fsm.VERTICAL_ORIENTATION;
          }
          if (button_down == 1)
          {
            regfile.player_position_in[15:8] = regfile.player_position_out[15:8] + 16;
            regfile.player_position_in[7:0] = regfile.player_position_out[15:8] + 32;
            regfile.vertical_orientation_in = 1;
            regfile.portrait_orientation_in = 0;
            movement_fsm.d = movement_fsm.VERTICAL_ORIENTATION;
          }
          // check orientation is portrait and is on win position to determine WIN
          if (regfile.player_position_out[15:8] == regfile.win_position_out){
            regfile.win_bool_in = 1;
            movement_fsm.d = movement_fsm.START;
          }
          // check position is out to determine LOSS
          if (regfile.map_out[255 - regfile.player_position_out[15:8]] == 0){
            regfile.loss_bool_in = 1;
            movement_fsm.d = movement_fsm.START;
          }

      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_1:
          regfile.player_position_in[15:8] = regfile.player_position_out[15:8] - 2;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_2;

      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PLAYER_POSITION_2:
          regfile.player_position_in[7:0] = regfile.player_position_out[15:8] + 1;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PORTRAIT_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_PORTRAIT_ORIENTATION:
          regfile.portrait_orientation_in = 0;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_HORIZONTAL_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_LEFT_UPDATE_HORIZONTAL_ORIENTATION:
          regfile.horizontal_orientation_in = 1;
          movement_fsm.d = movement_fsm.HORIZONTAL_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_1:
          regfile.player_position_in[15:8] = regfile.player_position_out[15:8] + 1;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_2;

      movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PLAYER_POSITION_2:
          regfile.player_position_in[7:0] = regfile.player_position_out[15:8] + 1;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PORTRAIT_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_PORTRAIT_ORIENTATION:
          regfile.portrait_orientation_in = 0;
          movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_HORIZONTAL_ORIENTATION;

      movement_fsm.PORTRAIT_ORIENTATION_RIGHT_UPDATE_HORIZONTAL_ORIENTATION:
          regfile.horizontal_orientation_in = 1;
          movement_fsm.d = movement_fsm.HORIZONTAL_ORIENTATION;

      movement_fsm.VERTICAL_ORIENTATION:
          if (button_left == 1)
          {
            regfile.player_position_in[15:8] = regfile.player_position_out[15:8] - 1;
            regfile.player_position_in[7:0] = regfile.player_position_out[7:0] - 1;
            movement_fsm.d = movement_fsm.VERTICAL_ORIENTATION;
          }
          if (button_right == 1)
          {
            regfile.player_position_in[15:8] = regfile.player_position_out[15:8] + 1;
            regfile.player_position_in[7:0] = regfile.player_position_out[7:0] + 1;
            movement_fsm.d = movement_fsm.VERTICAL_ORIENTATION;
          }
          if (button_up == 1)
          {
            regfile.player_position_in[15:8] = regfile.player_position_out[15:8] - 16;
            regfile.player_position_in[7:0] = 0;
            regfile.vertical_orientation_in = 0;
            regfile.portrait_orientation_in = 1;
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION;
          }
          if (button_down == 1)
          {
            regfile.player_position_in[15:8] = regfile.player_position_out[15:8] + 32;
            regfile.player_position_in[7:0] = 0;
            regfile.vertical_orientation_in = 0;
            regfile.portrait_orientation_in = 1;
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION;
          }
          // check position of first and last 8 bits is out to determine OUT
          if (regfile.map_out[255 - regfile.player_position_out[15:8]] == 0 || regfile.map_out[255 - regfile.player_position_out[7:0]] == 0){
            regfile.loss_bool_in = 1;
            movement_fsm.d = movement_fsm.START;
          }

      movement_fsm.HORIZONTAL_ORIENTATION:
          if (button_left == 1)
          {
            regfile.player_position_in[15:8] = regfile.player_position_out[15:8] - 1;
            regfile.player_position_in[7:0] = 0;
            regfile.horizontal_orientation_in = 0;
            regfile.portrait_orientation_in = 1;
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION;
          }
          if (button_right == 1)
          {
            regfile.player_position_in[15:8] = regfile.player_position_out[15:8] + 2;
            regfile.player_position_in[7:0] = 0;
            regfile.horizontal_orientation_in = 0;
            regfile.portrait_orientation_in = 1;
            movement_fsm.d = movement_fsm.PORTRAIT_ORIENTATION;
          }
          if (button_up == 1)
          {
            regfile.player_position_in[15:8] = regfile.player_position_out[15:8] - 16;
            regfile.player_position_in[7:0] = regfile.player_position_out[7:0] - 16;
            movement_fsm.d = movement_fsm.HORIZONTAL_ORIENTATION;
          }
          if (button_down == 1)
          {
            regfile.player_position_in[15:8] = regfile.player_position_out[15:8] + 16;
            regfile.player_position_in[7:0] = regfile.player_position_out[7:0] + 16;
            movement_fsm.d = movement_fsm.HORIZONTAL_ORIENTATION;
          }
          // check position of first and last 8 bits is out to determine OUT
          if (regfile.map_out[255 - regfile.player_position_out[15:8]] == 0 || regfile.map_out[255 - regfile.player_position_out[7:0]] == 0){
            regfile.loss_bool_in = 1;
            movement_fsm.d = movement_fsm.START;
          }
    }
  }
}
