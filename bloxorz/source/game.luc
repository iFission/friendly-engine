module game (
    input clk,  // clock
    input rst,  // reset

    input button_up,
    input button_down,
    input button_left,
    input button_right,
    input button_stage_left,
    input button_stage_right,
    input button_centre,

    // debug
    input io_dip[8],

    output map_out[256],
    output player_position_out[16],
    output win_position_out[8],
    output win_bool_out,
    output loss_bool_out,
    output portrait_orientation_out,
    output horizontal_orientation_out,
    output vertical_orientation_out,
    output map_index[2],
    output data_a_output[8],
    output data_b_output[8],
    output alu_output[8],
    output state_index[8],
    output temp_var_out[16]
  ) 

{

  //temp variables for alu
  sig data_a[16];
  sig data_b[16];

  alu16 alu16;
  
  .clk(clk){
    .rst(rst){
      regfile regfile;
      map map;
      control_unit control_unit;
    }
  }
  
  always {
    // assign outputs to mojo_top for debugging
    map_out = regfile.map_out;
    player_position_out[15-:8] = regfile.player_position_1_out;
    player_position_out[7-:8] = regfile.player_position_2_out;
    win_position_out = regfile.win_position_out;
    win_bool_out = regfile.win_bool_out;
    loss_bool_out = regfile.loss_bool_out;
    portrait_orientation_out = regfile.portrait_orientation_out;
    horizontal_orientation_out = regfile.horizontal_orientation_out;
    vertical_orientation_out = regfile.vertical_orientation_out;
    map_index = map.map_index;
    data_a_output = 0;
    data_b_output = 0;
    alu_output = alu16.alu;
    state_index = control_unit.state_index;
    temp_var_out = control_unit.temp_var_out;

    // initialise default regfile values
    regfile.map_in = map.map_out;
    // regfile.player_position_in = regfile.player_position_out;
    regfile.win_position_in = map.win_position_out;
    // regfile.win_bool_in = regfile.win_bool_out;
    // regfile.loss_bool_in = regfile.loss_bool_out;
    // regfile.portrait_orientation_in = regfile.portrait_orientation_out;
    // regfile.horizontal_orientation_in = regfile.horizontal_orientation_out;
    // regfile.vertical_orientation_in = regfile.vertical_orientation_out;

    // io between regfile and control_unit
    regfile.write_address = control_unit.write_address;
    regfile.write_enable = control_unit.write_enable;
    regfile.read_address_a = control_unit.read_address_a;
    regfile.read_address_b = control_unit.read_address_b;

    control_unit.output_a = regfile.output_a;
    control_unit.output_b = regfile.output_b;
    control_unit.output_alu = alu16.alu;

    // data path
    // a select mux
    case(control_unit.a_select){
      1b0: data_a = regfile.output_a;
      default: data_a = 0;
    }

    // b select mux
    case(control_unit.b_select){
      3b000: data_b = regfile.output_b;
      3b001: data_b = 1;
      3b010: data_b = 2;
      3b011: data_b = 16;
      3b100: data_b = 32;
      default: data_b = 0;
    }

    data_a_output = data_a;
    data_b_output = data_b;

    // wd select mux
    case(control_unit.wd_select){
      2b00: regfile.input_data = alu16.alu;
      2b01: regfile.input_data = 0;
      2b10: regfile.input_data = 1;
      default: regfile.input_data = 0;
    }

    // input to alu
    alu16.alufn = control_unit.alufn;
    alu16.a = data_a;
    alu16.b = data_b;

    // input to map fsm
    map.button_stage_left = button_stage_left;
    map.button_stage_right = button_stage_right;
    map.win_bool_in = regfile.win_bool_out;
    map.loss_bool_in = regfile.loss_bool_out;

    // button input to control_unit
    control_unit.button_up = button_up;
    control_unit.button_down = button_down;
    control_unit.button_left = button_left;
    control_unit.button_right = button_right;
    control_unit.button_stage_left = button_stage_left;
    control_unit.button_stage_right = button_stage_right;
    control_unit.button_centre = button_centre;

    // debug io for control_unit
    control_unit.io_dip = io_dip;
    control_unit.map_in = map.map_out;
    control_unit.player_position_1_in = regfile.player_position_1_out;
    control_unit.player_position_2_in = regfile.player_position_2_out;
    control_unit.player_position_in_init = map.player_position_out;
    control_unit.win_position_in = map.win_position_out;
    control_unit.win_bool_in = regfile.win_bool_out;
    control_unit.loss_bool_in = regfile.loss_bool_out;
    control_unit.portrait_orientation_in = regfile.portrait_orientation_out;
    control_unit.horizontal_orientation_in = regfile.horizontal_orientation_out;
    control_unit.vertical_orientation_in = regfile.vertical_orientation_out;

    regfile.player_position_1_in = control_unit.player_position_1_out;
    regfile.player_position_2_in = control_unit.player_position_2_out;
    regfile.win_bool_in = control_unit.win_bool_out;
    regfile.loss_bool_in = control_unit.loss_bool_out;
    regfile.portrait_orientation_in = control_unit.portrait_orientation_out;
    regfile.horizontal_orientation_in = control_unit.horizontal_orientation_out;
    regfile.vertical_orientation_in = control_unit.vertical_orientation_out;    
  }
}
